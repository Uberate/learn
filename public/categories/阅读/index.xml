<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>阅读 on Learn / Ub(s)erate</title>
    <link>https://uberate.github.io/learn/categories/%E9%98%85%E8%AF%BB/</link>
    <description>Recent content in 阅读 on Learn / Ub(s)erate</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© 2025 ub(s)erate</copyright>
    <lastBuildDate>Sun, 15 Jun 2025 18:57:15 +0800</lastBuildDate><atom:link href="https://uberate.github.io/learn/categories/%E9%98%85%E8%AF%BB/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>读 《Boredom Over Beauty: Why Code Quaility is Code Security》</title>
      <link>https://uberate.github.io/learn/posts/article/short/04_boredom_over_beauty/</link>
      <pubDate>Sun, 15 Jun 2025 18:57:15 +0800</pubDate>
      
      <guid>https://uberate.github.io/learn/posts/article/short/04_boredom_over_beauty/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文 &lt;a href=&#34;https://blog.asymmetric.re/boredom-over-beauty-why-code-quality-is-code-security/#the-pragmatism-of-prevention&#34; target=&#34;_blank&#34;&gt;Boredom Over Beauty: Why Code Quality is Code Security&lt;/a&gt; &amp;ndash; John Saigle&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&#34;lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl&#34;&gt;
  代码质量就是代码安全
&lt;/div&gt;

&lt;p&gt;文中作者阐述了 &lt;code&gt;代码安全&lt;/code&gt; 与 &lt;code&gt;代码质量&lt;/code&gt; 的关联，作者认为两者是密不可分的。&lt;/p&gt;

&lt;h3 class=&#34;relative group&#34;&gt;优秀的、可维护的代码往往会不容易引入安全问题 
    &lt;div id=&#34;优秀的可维护的代码往往会不容易引入安全问题&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e4%bc%98%e7%a7%80%e7%9a%84%e5%8f%af%e7%bb%b4%e6%8a%a4%e7%9a%84%e4%bb%a3%e7%a0%81%e5%be%80%e5%be%80%e4%bc%9a%e4%b8%8d%e5%ae%b9%e6%98%93%e5%bc%95%e5%85%a5%e5%ae%89%e5%85%a8%e9%97%ae%e9%a2%98&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;管理混乱的代码由于其可维护性比较低，容易遭受安全问题的注入。
此外，没有结构化和一致的代码风格会导致审核人员无法有效、及时的发现问题。&lt;/p&gt;
&lt;p&gt;由此可以得出一个结论：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码需要保持&lt;strong&gt;风格统一&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 class=&#34;relative group&#34;&gt;简单的代码一般出现的问题比较少 
    &lt;div id=&#34;简单的代码一般出现的问题比较少&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e7%ae%80%e5%8d%95%e7%9a%84%e4%bb%a3%e7%a0%81%e4%b8%80%e8%88%ac%e5%87%ba%e7%8e%b0%e7%9a%84%e9%97%ae%e9%a2%98%e6%af%94%e8%be%83%e5%b0%91&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The most secure code isn&amp;rsquo;t beautiful, clever, or elegant-it&amp;rsquo;s boring. Go, a
programming language that exemplifies this philosophy, intentionally omits
features that might enable expressive or elegant solutions in favor of simplicity
and readability. This apparent limitation produces code that&amp;rsquo;s easier to audit,
harder to misuse, and less prone to security vulnerabilities.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>读 《An illustrated guide to Amazon VPCs》</title>
      <link>https://uberate.github.io/learn/posts/article/short/03_an_illustrated_guide_to_amazon_vpcs/</link>
      <pubDate>Sun, 15 Jun 2025 18:55:14 +0800</pubDate>
      
      <guid>https://uberate.github.io/learn/posts/article/short/03_an_illustrated_guide_to_amazon_vpcs/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文 [An illustrated guide to Amazon VPCs](An illustrated guide to Amazon VPCs) &amp;ndash; Aditya Bhargava&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;作者阐述了 AWS 中 &lt;code&gt;VPC&lt;/code&gt; 的诞生原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 AWS 中，每个用户都有自己的私有网络，称作 &lt;code&gt;VPC&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果没有专用网络，IP 就会出现地址冲突的问题。&lt;/li&gt;
&lt;li&gt;如果没有专用网络，每个人都在同一个网络下，这不安全。&lt;/li&gt;
&lt;li&gt;VPC 是通过映射服务（Mapping service）实现的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;VPC&lt;/code&gt; 的全称: &lt;code&gt;Virtual Private Cloud&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;一般来说，VPC 应该会架设在 &lt;code&gt;ISO 网络七层&lt;/code&gt; 中的三层（网络层）。&lt;/p&gt;
&lt;p&gt;不了解网络七层的朋友可以看这篇文章，我大概标记了一下网络七层的作用:
&lt;a href=&#34;https://uberate.github.io/learn/posts/tech/network/base/&#34;&gt;网络基础&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>读 《The last six months in LLMs, illustrated by pelicans on bicycles》</title>
      <link>https://uberate.github.io/learn/posts/article/short/02_the_last_six_months_in_llms/</link>
      <pubDate>Sun, 15 Jun 2025 18:53:13 +0800</pubDate>
      
      <guid>https://uberate.github.io/learn/posts/article/short/02_the_last_six_months_in_llms/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文 &lt;a href=&#34;https://simonwillison.net/2025/Jun/6/six-months-in-llms/&#34; target=&#34;_blank&#34;&gt;The last six month in LLMs, illustrated by pelicans on bicycles&lt;/a&gt; - Simon Willison&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;写下这个文章的时候，时间是 &lt;code&gt;2025年06月15日&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这篇文章利用鹈鹕说明了当前 LLMs 世界中的重要时间点，以及一些作者的思考。
其实在某种程度上来说，这篇文章是一个对大模型发展的一个测试。
作者利用 &lt;code&gt;鹈鹕骑自行车&lt;/code&gt; 来测试大模型生成 &lt;code&gt;SVG&lt;/code&gt; 的能力。&lt;/p&gt;
&lt;p&gt;这其实倒也提醒了我，这是一个不可能的事情，鹈鹕是个鸟，他不会骑自行车。
那么这种不可能的事情交给 AI 会发生什么呢？&lt;/p&gt;
&lt;div class=&#34;lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl&#34;&gt;
  AI 对于莫名奇妙的事情可能无法做出很好的回应。
&lt;/div&gt;

&lt;p&gt;作者还提到了一些大模型的发展历程，有兴趣的朋友可以去阅读一下。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>读 《The Who Cares Era》</title>
      <link>https://uberate.github.io/learn/posts/article/short/01_the_who_cares_era/</link>
      <pubDate>Mon, 09 Jun 2025 22:08:10 +0800</pubDate>
      
      <guid>https://uberate.github.io/learn/posts/article/short/01_the_who_cares_era/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文 &lt;a href=&#34;https://dansinker.com/posts/2025-05-23-who-cares/&#34; target=&#34;_blank&#34;&gt;《The Who Cares Era》&lt;/a&gt; - Dan Sinker&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;文中提到了一个问题，’&lt;em&gt;&lt;strong&gt;谁在乎&lt;/strong&gt;&lt;/em&gt;‘ ？&lt;/p&gt;
&lt;p&gt;是的，这是一个非常快节奏的时代，大多数的人没有精力和时间去识别信息是否为真。
这样一来，谣言的传播非常快。
&lt;em&gt;但是我认为&lt;strong&gt;我们没有必要在乎这件事&lt;/strong&gt;&lt;/em&gt;。
我们应该避免成为 FakeNews 的传播者就足够了。&lt;/p&gt;
&lt;p&gt;这是时代是信息时代，我们每天周围都充斥的大量的信息输入。就拿我自己来说，我曾经几乎每天要处理1000条工作上的消息。
这几乎好近了我全部的精力。之后的很长时间，我都没有办法可以快速集中我的精力。这非常痛苦。
简单来算，假设每条消息需要阅读&lt;code&gt;5秒钟&lt;/code&gt;（这包括对问题的思考和对曾经的上下文检索的时间）。
那么我每一天花在阅读其他人发给我消息的时间大概就是 &lt;code&gt;5000秒&lt;/code&gt;, 约一个半小时。&lt;/p&gt;
&lt;p&gt;然而我的工作热情和能力并没有因为过多的信息而得到提升。相反，我感到非常痛苦。
所以，我得到了一个结论：&lt;/p&gt;
&lt;div class=&#34;lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl&#34;&gt;
  &lt;em&gt;我应该把精力放在提升自己的事情上，而且，我应该更加关心我的生活。&lt;/em&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;用技术去生存，用艺术去生活。
&amp;ndash; 电影《死亡诗社》&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;或许这是一个时代的变革，我从不认为新技术会让人先入悲哀，时代也是如此。
新的时代浪潮已经到来，我们不应该沉溺于过去，而是要向前看。
集中精力，做正确的事。&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
